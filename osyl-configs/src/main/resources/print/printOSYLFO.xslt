<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2010 rel. 2 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:altova="http://www.altova.com" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="#all">
	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	<xsl:param name="SV_OutputFormat" select="'PDF'"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:import-schema schema-location="d:\Mes documents\OSYL\OSYL-OO-xsd\SansProperties\OSYL OO_sansPropertiesSprint18.xsd"/>
	<xsl:variable name="fo:layout-master-set">
		<fo:layout-master-set>
			<fo:simple-page-master master-name="page-master-134664744-even" margin-left="0.60in" margin-right="0.60in" page-height="11in" page-width="8.50in">
				<fo:region-body margin-top="0.79in" margin-bottom="0.79in" column-count="1" column-gap="0.50in"/>
				<fo:region-before region-name="even-page-header" overflow="hidden" extent="0.79in"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-134664744-odd" margin-left="0.60in" margin-right="0.60in" page-height="11in" page-width="8.50in">
				<fo:region-body margin-top="0.79in" margin-bottom="0.79in" column-count="1" column-gap="0.50in"/>
				<fo:region-before region-name="odd-page-header" overflow="hidden" extent="0.79in"/>
			</fo:simple-page-master>
			<fo:page-sequence-master master-name="page-master-134664744">
				<fo:repeatable-page-master-alternatives>
					<fo:conditional-page-master-reference master-reference="page-master-134664744-even" odd-or-even="even"/>
					<fo:conditional-page-master-reference master-reference="page-master-134664744-odd" odd-or-even="odd"/>
				</fo:repeatable-page-master-alternatives>
			</fo:page-sequence-master>
		</fo:layout-master-set>
	</xsl:variable>
	<xsl:variable name="altova:PxPerIn" select="96"/>
	<xsl:variable name="altova:design-xslt-tree-view">
		<fo:root>
			<xsl:copy-of select="$fo:layout-master-set"/>
			<fo:page-sequence master-reference="page-master-134664744" initial-page-number="auto" format="1">
				<fo:static-content flow-name="odd-page-header">
					<fo:block-container margin-top="0.30in">
						<fo:block>
							<xsl:variable name="altova:table">
								<fo:table width="100%" table-layout="fixed" border-spacing="2pt">
									<fo:table-column column-width="90%"/>
									<fo:table-column column-width="10%"/>
									<xsl:variable name="altova:CurrContextGrid_0803E290" select="."/>
									<xsl:variable name="altova:ColumnData">
										<Dummy/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row>
												<fo:table-cell font-size="10pt" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Title: </xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="OSYL">
																<xsl:for-each select="CO">
																	<xsl:for-each select="title">
																		<altova:inline-container-substitute>
																			<xsl:apply-templates/>
																		</altova:inline-container-substitute>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
															<fo:inline>
																<xsl:text> - </xsl:text>
															</fo:inline>
															<xsl:for-each select="OSYL">
																<xsl:for-each select="CO">
																	<xsl:for-each select="identifier">
																		<altova:inline-container-substitute>
																			<xsl:apply-templates/>
																		</altova:inline-container-substitute>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="10pt" padding="0" display-align="center">
													<fo:block text-align="right">
														<fo:inline font-weight="bold">
															<xsl:text>Page: </xsl:text>
														</fo:inline>
														<fo:page-number/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell number-columns-spanned="2" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:block text-align="center">
															<fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:static-content flow-name="even-page-header">
					<fo:block-container margin-top="0.30in">
						<fo:block>
							<xsl:variable name="altova:table">
								<fo:table width="100%" table-layout="fixed" border-spacing="2pt">
									<fo:table-column column-width="90%"/>
									<fo:table-column column-width="10%"/>
									<xsl:variable name="altova:CurrContextGrid_0803E290" select="."/>
									<xsl:variable name="altova:ColumnData">
										<Dummy/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row>
												<fo:table-cell font-size="10pt" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Title: </xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="OSYL">
																<xsl:for-each select="CO">
																	<xsl:for-each select="title">
																		<altova:inline-container-substitute>
																			<xsl:apply-templates/>
																		</altova:inline-container-substitute>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
															<fo:inline>
																<xsl:text> - </xsl:text>
															</fo:inline>
															<xsl:for-each select="OSYL">
																<xsl:for-each select="CO">
																	<xsl:for-each select="identifier">
																		<altova:inline-container-substitute>
																			<xsl:apply-templates/>
																		</altova:inline-container-substitute>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="10pt" padding="0" display-align="center">
													<fo:block text-align="right">
														<fo:inline font-weight="bold">
															<xsl:text>Page: </xsl:text>
														</fo:inline>
														<fo:page-number/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell number-columns-spanned="2" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:block text-align="center">
															<fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:flow flow-name="xsl-region-body">
					<fo:block>
						<xsl:for-each select="$XML">
							<fo:external-graphic>
								<xsl:attribute name="src">
									<xsl:text>url(</xsl:text>
									<xsl:call-template name="double-backslash">
										<xsl:with-param name="text">
											<xsl:value-of select="string(&apos;..\OSYL\Interface usager\skin\images\hecmontreal.gif&apos;)"/>
										</xsl:with-param>
										<xsl:with-param name="text-length">
											<xsl:value-of select="string-length(string(&apos;..\OSYL\Interface usager\skin\images\hecmontreal.gif&apos;))"/>
										</xsl:with-param>
									</xsl:call-template>
									<xsl:text>)</xsl:text>
								</xsl:attribute>
							</fo:external-graphic>
							<fo:inline>
								<xsl:text>&#x200B;</xsl:text>
							</fo:inline>
							<fo:block text-align="center">
								<fo:leader leader-pattern="rule" rule-thickness="2" leader-length="100%"/>
							</fo:block>
							<altova:newline-handler/>
							<xsl:for-each select="OSYL">
								<xsl:for-each select="CO">
									<fo:block font-size="x-large" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
										<xsl:for-each select="title">
											<altova:inline-container-substitute>
												<xsl:apply-templates/>
											</altova:inline-container-substitute>
											<fo:inline>
												<xsl:text>&#160; </xsl:text>
											</fo:inline>
										</xsl:for-each>
									</fo:block>
								</xsl:for-each>
							</xsl:for-each>
							<altova:newline-handler/>
							<xsl:for-each select="OSYL">
								<xsl:for-each select="CO">
									<fo:block font-size="large" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
										<xsl:for-each select="identifier">
											<altova:inline-container-substitute>
												<xsl:apply-templates/>
											</altova:inline-container-substitute>
										</xsl:for-each>
									</fo:block>
								</xsl:for-each>
							</xsl:for-each>
							<altova:newline-handler/>
							<fo:block text-align="center">
								<fo:leader leader-pattern="rule" rule-thickness="2" leader-length="100%"/>
							</fo:block>
							<fo:block font-size="x-large" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
								<fo:inline>
									<xsl:text>Présentation du cours</xsl:text>
								</fo:inline>
							</fo:block>
							<xsl:for-each select="OSYL">
								<xsl:for-each select="CO">
									<xsl:for-each select="asmStructure">
										<xsl:for-each select="asmUnit">
											<xsl:for-each select="asmUnitStructure">
												<xsl:for-each select="asmUnitContent">
													<xsl:if test="@xsi:type  = &quot;OverviewUnitContent&quot;">
														<xsl:for-each select="asmContext">
															<xsl:choose>
																<xsl:when test="semanticTag = &quot;description&quot;">
																	<xsl:for-each select="semanticTag">
																		<fo:block font-size="large" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
																			<fo:inline>
																				<xsl:text>Description</xsl:text>
																			</fo:inline>
																		</fo:block>
																	</xsl:for-each>
																</xsl:when>
																<xsl:when test="semanticTag = &quot;learningstrat&quot;">
																	<fo:block font-size="large" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
																		<fo:inline>
																			<xsl:text>Approche pédagogique</xsl:text>
																		</fo:inline>
																	</fo:block>
																</xsl:when>
															</xsl:choose>
															<xsl:for-each select="asmResource">
																<xsl:if test="@xsi:type =  &quot;Text&quot;">
																	<xsl:for-each select="text">
																		<altova:inline-container-substitute>
																			<xsl:apply-templates/>
																		</altova:inline-container-substitute>
																	</xsl:for-each>
																</xsl:if>
															</xsl:for-each>
															<altova:newline-handler/>
															<altova:newline-handler/>
														</xsl:for-each>
													</xsl:if>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
							<altova:newline-handler/>
							<fo:block text-align="center">
								<fo:leader leader-pattern="rule" rule-thickness="2" leader-length="100%"/>
							</fo:block>
							<altova:newline-handler/>
							<fo:block font-size="x-large" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
								<fo:inline>
									<xsl:text>Coordonnées</xsl:text>
								</fo:inline>
							</fo:block>
							<xsl:for-each select="OSYL">
								<xsl:for-each select="CO">
									<xsl:for-each select="asmStructure">
										<xsl:for-each select="asmUnit">
											<xsl:for-each select="asmUnitStructure">
												<xsl:for-each select="asmUnitContent[@xsi:type = &quot;StaffUnitContent&quot;]">
													<altova:newline-handler/>
													<xsl:for-each select="asmContext[semanticTag = &quot;lecturers&quot;]">
														<xsl:if test="position()=1">
															<fo:block font-size="large" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
																<fo:inline>
																	<xsl:text>Enseignant(s)</xsl:text>
																</fo:inline>
															</fo:block>
														</xsl:if>
														<xsl:call-template name="xsiTypePeopleContext"/>
														<altova:newline-handler/>
														<altova:newline-handler/>
													</xsl:for-each>
													<altova:newline-handler/>
													<xsl:if test="asmContext/semanticTag=&quot;lecturers&quot;"/>
													<altova:newline-handler/>
													<xsl:for-each select="asmContext[semanticTag = &quot;teachingassistants&quot;]">
														<xsl:if test="position()=1">
															<fo:block font-size="large" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
																<fo:inline>
																	<xsl:text>Stagiaire(s) d&apos;enseignement</xsl:text>
																</fo:inline>
															</fo:block>
														</xsl:if>
														<altova:newline-handler/>
														<xsl:call-template name="xsiTypePeopleContext"/>
														<altova:newline-handler/>
													</xsl:for-each>
													<altova:newline-handler/>
													<xsl:for-each select="asmContext[semanticTag = &quot;secretaries&quot;]">
														<xsl:if test="position()=1">
															<fo:block font-size="large" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
																<fo:inline>
																	<xsl:text>Secrétaire(s)</xsl:text>
																</fo:inline>
															</fo:block>
														</xsl:if>
														<xsl:call-template name="xsiTypePeopleContext"/>
														<altova:newline-handler/>
														<altova:newline-handler/>
													</xsl:for-each>
													<altova:newline-handler/>
													<altova:newline-handler/>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
							<altova:newline-handler/>
							<altova:newline-handler/>
							<fo:block text-align="center">
								<fo:leader leader-pattern="rule" rule-thickness="2" leader-length="100%"/>
							</fo:block>
							<altova:newline-handler/>
							<fo:block font-size="x-large" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
								<fo:inline>
									<xsl:text>Matériel Pédagogique</xsl:text>
								</fo:inline>
							</fo:block>
							<xsl:for-each select="OSYL">
								<xsl:for-each select="CO">
									<xsl:for-each select="asmStructure">
										<xsl:for-each select="asmUnit">
											<xsl:for-each select="asmUnitStructure">
												<xsl:for-each select="asmUnitContent[@xsi:type = &quot;LearningMaterialUnitContent&quot;]">
													<xsl:for-each select="asmContext[semanticTag = &quot;bibliographicres&quot;]">
														<xsl:if test="position()=1">
															<fo:block font-size="large" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
																<fo:inline>
																	<xsl:text>Ressources bibliographiques</xsl:text>
																</fo:inline>
															</fo:block>
														</xsl:if>
														<xsl:choose>
															<xsl:when test="@xsi:type=&quot;ReferenceContext&quot;">
																<xsl:call-template name="xsiTypeReferenceContext"/>
															</xsl:when>
															<xsl:when test="@xsi:type=&quot;BiblioContext&quot;">
																<xsl:call-template name="xsiTypeBiblioContext"/>
															</xsl:when>
														</xsl:choose>
														<altova:newline-handler/>
													</xsl:for-each>
													<altova:newline-handler/>
													<xsl:for-each select="asmContext[semanticTag = &quot;complbibres&quot;]">
														<xsl:if test="position()=1">
															<fo:block font-size="large" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
																<fo:inline>
																	<xsl:text>Ressources bibliographiques complémentaires</xsl:text>
																</fo:inline>
															</fo:block>
														</xsl:if>
														<xsl:choose>
															<xsl:when test="@xsi:type=&quot;ReferenceContext&quot;">
																<xsl:call-template name="xsiTypeReferenceContext"/>
															</xsl:when>
															<xsl:when test="@xsi:type=&quot;BiblioContext&quot;">
																<xsl:call-template name="xsiTypeBiblioContext"/>
															</xsl:when>
														</xsl:choose>
													</xsl:for-each>
													<altova:newline-handler/>
													<xsl:for-each select="asmContext[semanticTag = &quot;tools&quot;]">
														<xsl:if test="position()=1">
															<fo:block font-size="large" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
																<fo:inline>
																	<xsl:text>Outils</xsl:text>
																</fo:inline>
															</fo:block>
														</xsl:if>
														<xsl:choose>
															<xsl:when test="@xsi:type=&quot;ReferenceContext&quot;">
																<xsl:call-template name="xsiTypeReferenceContext"/>
															</xsl:when>
															<xsl:when test="@xsi:type=&quot;BiblioContext&quot;">
																<xsl:call-template name="xsiTypeBiblioContext"/>
															</xsl:when>
														</xsl:choose>
													</xsl:for-each>
													<altova:newline-handler/>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
							<altova:newline-handler/>
							<altova:newline-handler/>
							<fo:block text-align="center">
								<fo:leader leader-pattern="rule" rule-thickness="2" leader-length="100%"/>
							</fo:block>
							<altova:newline-handler/>
						</xsl:for-each>
						<altova:newline-handler/>
						<altova:newline-handler/>
						<altova:newline-handler/>
					</fo:block>
					<fo:block id="SV_RefID_PageTotal"/>
				</fo:flow>
			</fo:page-sequence>
		</fo:root>
	</xsl:variable>
	<xsl:template name="xsiTypePeopleContext">
		<xsl:for-each select="Person">
			<xsl:for-each select="firstname">
				<altova:inline-container-substitute font-size="larger" font-weight="bold">
					<xsl:apply-templates/>
				</altova:inline-container-substitute>
			</xsl:for-each>
			<fo:inline>
				<xsl:text>&#160;</xsl:text>
			</fo:inline>
			<xsl:for-each select="surname">
				<altova:inline-container-substitute font-size="larger" font-weight="bold">
					<xsl:apply-templates/>
				</altova:inline-container-substitute>
			</xsl:for-each>
			<altova:newline-handler/>
			<xsl:for-each select="title">
				<altova:inline-container-substitute>
					<xsl:apply-templates/>
				</altova:inline-container-substitute>
			</xsl:for-each>
			<altova:newline-handler/>
			<xsl:for-each select="email">
				<altova:inline-container-substitute>
					<xsl:apply-templates/>
				</altova:inline-container-substitute>
			</xsl:for-each>
			<altova:newline-handler/>
			<xsl:for-each select="tel">
				<altova:inline-container-substitute>
					<xsl:apply-templates/>
				</altova:inline-container-substitute>
			</xsl:for-each>
			<altova:newline-handler/>
			<fo:inline>
				<xsl:text>Bureau: </xsl:text>
			</fo:inline>
			<xsl:for-each select="officeroom">
				<altova:inline-container-substitute>
					<xsl:apply-templates/>
				</altova:inline-container-substitute>
			</xsl:for-each>
			<altova:newline-handler/>
			<fo:inline>
				<xsl:text>Disponibilité:</xsl:text>
			</fo:inline>
			<xsl:for-each select="parent">
				<altova:inline-container-substitute>
					<xsl:apply-templates/>
				</altova:inline-container-substitute>
			</xsl:for-each>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="xsiTypeReferenceContext">
		<xsl:for-each select="label">
			<altova:inline-container-substitute>
				<xsl:apply-templates/>
			</altova:inline-container-substitute>
		</xsl:for-each>
		<altova:newline-handler/>
		<xsl:for-each select="comment">
			<altova:inline-container-substitute>
				<xsl:apply-templates/>
			</altova:inline-container-substitute>
		</xsl:for-each>
		<altova:newline-handler/>
		<xsl:for-each select="asmRessource">
			<xsl:for-each select="identifier">
				<altova:inline-container-substitute>
					<xsl:apply-templates/>
				</altova:inline-container-substitute>
			</xsl:for-each>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="xsiTypeBiblioContext">
		<xsl:for-each select="comment">
			<altova:inline-container-substitute>
				<xsl:apply-templates/>
			</altova:inline-container-substitute>
		</xsl:for-each>
		<altova:newline-handler/>
		<xsl:for-each select="identifier">
			<altova:inline-container-substitute>
				<xsl:apply-templates/>
			</altova:inline-container-substitute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="double-backslash">
		<xsl:param name="text"/>
		<xsl:param name="text-length"/>
		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
		<xsl:choose>
			<xsl:when test="$text-after-bs-length = 0">
				<xsl:choose>
					<xsl:when test="substring($text, $text-length) = '\'">
						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$text"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
				<xsl:call-template name="double-backslash">
					<xsl:with-param name="text" select="$text-after-bs"/>
					<xsl:with-param name="text-length" select="$text-after-bs-length"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:MakeValueAbsoluteIfPixels">
		<xsl:param name="sValue"/>
		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>
		<xsl:choose>
			<xsl:when test="$sBeforePx">
				<xsl:variable name="nLengthOfInteger">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="$sBeforePx"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>
				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>
				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:PxPerIn)"/>
				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>
				<xsl:variable name="sRest">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$sValue"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">
		<xsl:param name="sText"/>
		<xsl:variable name="sLen" select="string-length($sText)"/>
		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>
		<xsl:choose>
			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">
				<xsl:variable name="nResultOfRest">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$nResultOfRest + 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>0</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="/">
		<xsl:apply-templates select="$altova:design-xslt-tree-view" mode="second-step"/>
	</xsl:template>
	<xsl:template match="altova:inline-container-substitute" mode="second-step">
		<xsl:choose>
			<xsl:when test="empty(for $i in child::node() return index-of(('fo:block', 'fo:block-container', 'fo:list-block', 'fo:table'), name($i))) or name(../..) eq 'fo:list-item-body'">
				<fo:inline>
					<xsl:copy-of select="@* except @altova-DisableOutputEscaping"/>
					<xsl:apply-templates mode="second-step"/>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<fo:block>
					<xsl:copy-of select="@* except @altova-DisableOutputEscaping"/>
					<xsl:apply-templates mode="second-step"/>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="altova:basic-link-container" mode="second-step">
		<fo:block text-align-last="justify">
			<xsl:apply-templates mode="second-step"/>
		</fo:block>
	</xsl:template>
	<xsl:template match="altova:newline-handler" mode="second-step">
		<xsl:variable name="name-following-sibling" select="name(following-sibling::*[1])"/>
		<xsl:variable name="name-preceding-sibling" select="name(preceding-sibling::*[1])"/>
		<xsl:if test="($name-following-sibling and $name-following-sibling != 'fo:table' and $name-following-sibling != 'altova:newline-handler' and $name-preceding-sibling != 'altova:basic-link-container') or $name-preceding-sibling = 'altova:newline-handler'">
			<fo:block>
				<xsl:if test="($name-preceding-sibling != 'altova:inline-container-substitute' and $name-preceding-sibling != 'fo:inline' and $name-preceding-sibling != 'fo:basic-link') or ($name-following-sibling != 'altova:inline-container-substitute' and $name-following-sibling != 'fo:inline' and $name-following-sibling != 'fo:basic-link')">
					<fo:leader leader-pattern="space"/>
				</xsl:if>
			</fo:block>
		</xsl:if>
	</xsl:template>
	<xsl:template match="*|@*" mode="second-step">
		<xsl:copy>
			<xsl:apply-templates select="*|@* except @altova-DisableOutputEscaping|text()" mode="second-step"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="text()" mode="second-step">
		<xsl:choose>
			<xsl:when test="../@altova-DisableOutputEscaping">
				<xsl:value-of select="." disable-output-escaping="yes"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
